!function(){angular.module("app",["app.core","app.streamers"])}(),function(){angular.module("app.core",["ngCookies"])}(),function(){angular.module("app.streamers",[])}(),function(){function e(e,n,t,a){function r(e){return n(function(n,t){var a=v.slice(0);if(e&&(e.state&&(a=a.filter(function(n){return n.online===("online"===e.state)})),e.name)){var r=new RegExp(e.name,"i");a=a.filter(function(e){return r.test(e.name)||r.test(e.displayName)})}n(a)})}function i(){return n(function(e,t){var a=[];v.forEach(function(e){a.push(c(e.name))}),e(n.all(a))})}function o(e){return n(function(n,t){if(e)if(e.name){var a=v.map(function(e){return e.name}).indexOf(e.name);if(-1!==a){var r=v.splice(a,1)[0];v.splice(e.newIndex,0,r)}}else if("name"===e.split(":")[0])switch(e.split(":")[1]){case"asc":v.sort(function(e,n){return e=e.displayName.toLowerCase(),n=n.displayName.toLowerCase(),n>e?-1:e>n?1:0});break;case"desc":v.sort(function(e,n){return e=e.displayName.toLowerCase(),n=n.displayName.toLowerCase(),n>e?1:e>n?-1:0})}else if("online"===e.split(":")[0])switch(e.split(":")[1]){case"true":v.sort(function(e,n){return e.online===n.online?0:e.online?-1:1});break;case"false":v.sort(function(e,n){return e.online===n.online?0:e.online?1:-1})}n("Streamers sorted.")})}function c(e){return l(e).then(d)["catch"](function(n){a.warn("Failed to add streamer: "+e+".",n)})}function s(e){return h(e)["catch"](function(n){a.warn("Failed to remove streamer: "+e+".",n)})}function u(t){function r(e){return n(function(n,t){var a=[],r=5;if(e=e.data.channels)for(var i=0;r>i&&e[i];i++){var o={};o.name=e[i].name,o.displayName=e[i].display_name,a.push(o)}n(a)})}return e.jsonp("https://api.twitch.tv/kraken/search/channels?q="+t+"&callback=JSON_CALLBACK").then(r)["catch"](function(e){a.warn("Failed to get streamer IDs.",e)})}function f(){var e=p||m();return e}function m(){function r(){return n(function(n,a){var r=t.get("trackedStreamers"),i=[];r?(r.split(",").forEach(function(e){i.push(c(e))}),n(i)):e.jsonp("https://api.twitch.tv/kraken/streams/?callback=JSON_CALLBACK").then(function(e){var t=[e.data.streams[0].channel.name,e.data.streams[1].channel.name,e.data.streams[2].channel.name,e.data.streams[3].channel.name,e.data.streams[4].channel.name];t.forEach(function(e){i.push(c(e))}),n(i)})["catch"](function(e){a(e)})})}return p?p:r().then(function(e){return n.all(e)}).then(function(){return p=n.when(!0)})["catch"](function(e){a.warn("Failed to initialize data service.",e)})}function l(t){function r(){return n(function(n,a){var r={};e.jsonp("https://api.twitch.tv/kraken/streams/"+t+"?callback=JSON_CALLBACK").then(function(n){return r.basic=n,e.jsonp(n.data._links.channel+"?callback=JSON_CALLBACK")}).then(function(n){return r.channel=n,e.jsonp(n.data._links.videos+"?callback=JSON_CALLBACK")}).then(function(e){r.videos=e,n(r)})["catch"](function(e){a(e)})})}function i(e){return n(function(n,a){var r={};if(e){var i=e.basic,o=e.channel,c=e.videos;r.name=t,r.online=null!==i.data.stream,r.online&&(r.stream={},r.stream.game=i.data.stream.game,r.stream.viewers=i.data.stream.viewers,r.stream.preview=i.data.stream.preview.large),r.displayName=o.data.display_name,r.logo=o.data.logo,r.status=o.data.status,r.url=o.data.url,r.videoBanner=o.data.video_banner,r.videos=[],c.data.videos.forEach(function(e){r.videos.push({title:e.title,description:e.description,date:e.recorded_at,duration:e.length,preview:e.preview,url:e.url})})}n(r)})}return r().then(i)["catch"](function(e){a.warn("Failed to get streamer: "+t+".",e)})}function d(e){function r(){return n(function(n,t){if(e&&e.name){var a=v.map(function(e){return e.name}).indexOf(e.name);-1!==a?v[a]=e:v.unshift(e),n("Streamer data cached.")}else t("Attempting to cache data on an unknown streamer.")})}function i(){return n(function(n,a){if(e&&e.name){var r=t.get("trackedStreamers");if(r){var i=-1!==r.split(",").indexOf(e.name);i||(r=e.name+","+r,t.put("trackedStreamers",r))}else t.put("trackedStreamers",e.name);n("Streamer remembered.")}else a("Attempting to remember an unknown streamer.")})}return r().then(i)["catch"](function(e){a.warn("Failed to track a streamer.",e)})}function h(e){function r(){return n(function(n,t){e?(e.name&&(e=e.name),v=v.filter(function(n){return n.name!==e}),n("Streamer data uncached.")):t("Attempting to uncache data on an unknown streamer.")})}function i(){return n(function(n,a){if(e){var r=t.get("trackedStreamers");r&&(r=r.split(",").filter(function(n){return n!==e}).join(","),t.put("trackedStreamers",r)),n("Streamer forgotten.")}else a("Attempting to forget an unknown streamer.")})}return r().then(i)["catch"](function(e){a.warn("Failed to untrack a streamer.",e)})}var p,v=[],g={getStreamers:r,refreshStreamers:i,sortStreamers:o,addStreamer:c,removeStreamer:s,getStreamerIDs:u,ready:f};return g}angular.module("app.core").factory("dataservice",["$http","$q","$cookies","$log",e])}(),function(){function e(e){function n(){e.refreshStreamers().then(s)}function t(n){e.sortStreamers(n).then(s)}function a(){s()}function r(){e.addStreamer(u.toAdd).then(s),u.toAdd=""}function i(n){e.removeStreamer(n).then(s)}function o(){e.getStreamerIDs(u.toAdd).then(function(e){u.foundIDs=e})["catch"](function(e){})}function c(){e.ready().then(s)}function s(){e.getStreamers(u.filterOptions).then(function(e){u.streamers=e})["catch"](function(e){})}var u=this;u.streamers=[],u.foundIDs=[],u.refresh=n,u.sort=t,u.filter=a,u.filterOptions={},u.add=r,u.toAdd="",u.remove=i,u.findMatchingIDs=o,c()}angular.module("app.streamers").controller("StreamersController",["dataservice",e])}();
//# sourceMappingURL=data:application/json;base64,
